[{"title":"知识图谱学习（二）","date":"2020-10-27T08:35:16.510Z","url":"/SmartBoyMB.github.io/2020/10/27/kglearning2/","tags":[["知识图谱","/SmartBoyMB.github.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"],["概念","/SmartBoyMB.github.io/tags/%E6%A6%82%E5%BF%B5/"]],"categories":[["学习","/SmartBoyMB.github.io/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"知识图谱123"},{"title":"知识图谱学习（一）","date":"2020-10-26T03:04:42.933Z","url":"/SmartBoyMB.github.io/2020/10/26/KnowledgeGraphLearning1/","tags":[["知识图谱","/SmartBoyMB.github.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"],["概念","/SmartBoyMB.github.io/tags/%E6%A6%82%E5%BF%B5/"]],"categories":[["学习","/SmartBoyMB.github.io/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"知识图谱学习这里将介绍有关知识图谱学习的第一部分，主要是知识图谱的一个概述。 知识的定义陈述性知识（描述性知识）描述客观事物的性状等静态信息，主要分为事物、概念、命题三个层次。 事物：特定的事和物。 概念：对一类事物本质特性的反映。 （3）命题对事物之间的陈述。分为非概括性命题和概括性命题。 非概括性命题：特定的事物之间的关系。 概括性命题：概念之间的普遍关系。 过程性知识（程序性知识）描述问题如何求解等动态信息，分为规则和控制结构两种类型。 规则：描述事物的因果关系。 控制结构：描述问题的求解步骤。 知识图谱的定义图是一种能有效表示数据之间结构的表达形式，因此，人们考虑把数据中蕴含的知识用图的结构进行形式化表示。数据的结构化并和以后的结构化数据进行关联，就构成了知识图谱。 知识和结构化数据的表示和存储在计算机科学领域，对知识和结构化数据的表示和存储具有不同的技术路线，最典型的包括本体（Ontology）和数据库（Database）两类。 本体在人工只能领域，本体是通过对象类型、属性类型以及关系类型对领域知识进行形式化描述的模型。本体强调抽象的概念表示，因此只对数据的定义进行了描述，而没有描述具体的实例数据。 数据库数据库是计算机科学家为了电脑表示和存储计算机应用中需要的数据而设计开发的产品。不同类型的数据库（关系数据库、面向对象数据库、非关系型数据库等），一般用于存储数据，这些数据可以进行传递和交换。数据库对于数据的描述和数据本身的操作提供了不同的描述语言，因此我们认为，数据库系统对数据描述和数据记录的表示和存储采用了不同的机制。 知识图谱的数据描述实际上，人工智能应用中不仅需要具体的知识实例数据，数据的描述和定义也非常关键，例如概念上下位知识（‘大熊猫’是一种‘熊科动物’）、属性之间的关系（‘子女’与‘父母’是逆关系）、属性的约束（一个‘人’的‘父母’只有‘2个’）等。 知识图谱用统一的形式对知识实例数据的定义和具体知识数据进行描述，即用三元组形式（二元关系）对知识系统进行资源描述和存储。例如：WIkidata中不仅用&lt;Max Planck, instance of ,human&gt;表达具体的实例数据，也用&lt;place of birth, value type constraint, geographical object&gt;等三元组对相关知识结构进行了描述。 实例数据只有在满足系统约定的‘框架’约束下运用才能体现为‘知识’，其中“框架”（Schema或元知识）就是对知识的描述和定义，知识框架和实例数据共同构成一个完整的知识系统。 知识图谱以结构化三元组的形式存储现实世界中的实体以及实体之间的关系，表示为$ g=(\\varepsilon,R,S) $,其中$\\varepsilon={e_1,e_2,\\cdots,e_(|\\varepsilon|)}$表示实体集合，$R={r_1,r_2,\\cdots,r_(|R|)}$表示关系集合，$S\\subseteq R\\times \\varepsilon\\times \\varepsilon$表示知识图谱中三元组的集合。三元组通常描述了一个特定领域中的事实，由头实体、尾实体和描述这两个实体之间的关系组成。 尽管目前大部分知识图谱都以三元组的形式表示各种类型的知识，但是实际上知识图谱的知识表示绝不仅仅体现在以二元关系为基础的三元组上，还体现在实体、类别、属性、关系等多颗粒度、多层次语义单元的关联之中， 它以一种统一的方式体现知识定义（Schema）和知识实例（Instance）两个层次共同构成的知识系统。 知识框架知识图谱应该包含哪些知识目前还没有统一定论。从知识工程的角度，知识框架一般包含了三个层次的知识： 概念知识：给出了知识的最基本内容。 事实知识：建立了概念之间的联系。 规则知识：建立了事物之间的联系。 综上，知识图谱以丰富的语义表示能力和灵活的结构构件了计算机世界中表示认知世界和物理世界中信息和知识的有效载体，成为人工智能应用的重要基础设施。 知识图谱类型知识的类型（不同划分）根据知识的主客观性，可以把知识分为事实性（或客观性）知识和主观性知识。 事实性知识: 通常是指那些确定性的。不随状态的变化而改变的知识，例如：“中华人民共和国的首都是北京”。 主观性知识：通常指某个人或群体的情感信息，例如：“大部分人都觉得苹果手机太贵了”这句话包含了用户对于苹果手机的意见和态度，但是这一态度会随着评论者的变化而变化。 根据知识变化的性质，已有的知识可以分为静态知识和动态知识。 静态知识：不随时间、空间的变化而变化，例如“生日”。 动态知识：随时间、空间的变化而变化的知识，例如“美国总统”。事件是动态知识的重要组成部分。 除此之外，我们也可以吧只是分为领域知识、百科知识、场景知识、语言知识、常识知识等等。 知识图谱的划分已有的知识图谱根据领域和用途大致分为语言知识图谱、语言认识知识图谱、常识知识图谱、领域知识图谱以及百科知识图谱等几个类别。对几个代表性的知识图谱简单介绍： Cyc Cyc是一个通用的常识数据库。 始建于1984年，其目的是将上百万条知识编码为机器可处理的形式，并在其基础上实现知识推理等智能信息处理任务。 主要由人工构建，包含50万实体，接近3万个关系以及500万事实。 用一阶谓词对知识进行描述，表达能力受限。 包含用于推理的常识规则，并提供多种推理引擎，支持演绎推理和归纳推理，同时也提供扩展推理机制的模块。 WordNet 一个英文电子词典和本体，将英文单词按照单词语义组成一个大的概念网络。 1985年由Princeton大学公布的一个英文电子词典和本体。 词语被聚类成同义词集。 知网（HowNet） 一个语言认知知识库/常识知识库，一概念为中心，基于义原描述了概念与概念之间以及概念所具有的属性之间的关系，每一个概念可以由多种语言的词汇进行描述（主要为中文和英文）。 由董振东教授主持开发。 知网是一个知识系统，经过多年的发展，目前知网总共包含了800多个义原，11000个词语。 ConceptNet ConceptNet是一个开放的、多语言的知识图谱。 致力于帮助计算机理解人们日常使用的单词意义。 由大量概念以及描述它们之间关系的常识构成，支持多种语言，可以用自然语言处理多种人工智能应用。 知识图谱的生命周期主要包括知识体系构建、知识获取、知识融合、知识存储、知识推理和知识应用等。 知识体系构建知识体系构建，也称知识建模。语义网的核心是让计算机能够理解文档中的数据，以及数据和数据之间的语义关联关系，从而使得计算机可以更加自动化、智能化地处理这些信息。与以往涉及面较广，只介绍与知识图谱数据建模紧密相关的核心概念——资源描述框架（RDF），RDF的基本数据模型包括了三个对象类型： 资源：能够使用RDF表示的对象称之为资源，包括互联网上的实体、事件和概念等。 谓词：谓词主要描述资源本身的特征和资源之间的关系。每一个谓词可以定义元知识。 陈述：一条陈述包含三个部分，通常称之为RDF三元组&lt;主题（subject）,谓词（predicate），宾语（object）&gt;。主体是被描述的资源，谓词表示主体的属性，也可以表示主体与宾语之间的关系。 知识获取知识获取的目标是从海量的文本数据中通过信息抽取的方式获取知识，其方法根据所处理数据源的不同而不同。知识图谱中的主要数据来源有各种形式的结构化数据、半结构化数据和非结构化文本数据（纯文本）。相比于结构化和半结构化数据、非结构化文本数据要丰富的多。因此需要进行文本信息抽取，包括如下基本任务。 实体识别：实体识别任务的目标是从文本中识别实体信息。 实体消歧：实体消歧任务的目标是消除指定实体的歧义。 关系抽取：关系抽取的目标是获得两个实体之间的语义关系（可以是一元，二元，甚至更高元的关系）。 事件抽取：实践任务的目标是从描述事件信息的文本中抽取出用户感兴趣的事件信息并以结构化的的形式呈现出来。 知识融合从融合的对象上看，知识融合包括：知识体系的融合和实例的融合。知识体系的融合就是两个或多个异构知识体系进行融合，相同类别、属性、关系进行映射。实例融合是对于两个不同知识图谱中的实例（实体实例，关系实例）进行融合，包括不同体系下的实例、不同语言的实例。核心是计算两个知识图谱中的两个节点或边之间的语义映射关系。 从融合知识图谱类型上看，知识融合又分为：竖直方向的融合和水平方向的融合。竖直方向的融合：指融合高层通用本体与底层领域本体或实例数据。水平方向的融合：指融合同层次的知识图谱，实现实例数据的互补。 知识存储目前知识图谱大多是基于图的数据结构，它的存储方式主要有两种形式：RDF格式存储和图数据库（Graph Database）。 RDF格式存储：就是以三元组的形式存储数据。不过由于逐行文本的存储使得搜索效率低下，为了提升三元组的搜索效率，通常采用六重索引的方法。 图数据库：比RDF数据库更加通用，目前典型的开源图数据库是Neo4j，这种图数据库的优点是具有完善的图查询语言，支持大多数图挖掘算法，它的缺点是数据更新慢，大节点的处理开销大。为了解决上述问题，子图筛选，子图同构判定等技术是目前图数据库的研究热点。 知识推理由于处理数据的不完备性，所构建的知识图谱中肯定存在知识缺失现象（包括实体缺失、关系缺失）由于数据的稀疏性，我们也很难利用抽取或者融合的方法对缺失的知识进行补齐。因此，需要采用推理的手段发现已有知识中的隐含的知识。目前知识推理的研究主要集中在针对知识图谱中缺失关系的不足，即挖掘两个实体之间隐含的语义关系。所采用的的方法分为两种： 基于传统逻辑规则的方法进行推理：研究热点在于如何自动学习推理规则，以及如何解决推理过程中的规则冲突问题。 基于表示学习的推理：即采用学习的方式，将传统推理过程转化为基于分布式表示的语义向量相似度计算任务，这类方法的优点是容错率高、可学习，缺点也显而易见，即不可解释，缺乏语义约束。 当然，知识推理不仅应用于知识图谱的补全，也可以直接应用于相关应用任务。 知识应用 知识搜索：基于知识图谱的搜索引擎，可以根据用户查询准确地返回答案。用户意图理解是智能搜索的核心步骤。 自动问答：利用知识图谱中的实体及其关系进行推理得到答案。 推荐：利用知识图谱中的实体（商品）的关系（类别）向用户推荐相关的产品。 决策支持：知识图谱能够吧领域内的复杂知识通过信息抽取、数据挖掘、语义匹配、语义计算、知识推理等过程精确地描绘出来，并且可以描述知识的演化过程和发展规律，从而为研究和决策提供准确、可追踪、可解释、可推理的知识数据。 知识图谱与深度学习基于数值计算的深度学习方法与基于符号表示和匹配的方法需要融合。以下列举一些进展： 词的表示学习：是基于深度学习的自然语言处理方法的基础步骤，其主要目标是把每个词符号表示为分布向量的形式（Distributional Representation），基于词的向量表示，句子、段落、篇章、对话等更大的语言单元就可以通过语义组合模型（如卷积神经网络、循环神经网络等深度学习模型）得到，进而进行文本分类、问答匹配、机器翻译、对话生成等任务。 知识图谱表示学习：是将知识图谱中符号表示的实体和关系投影到低维向量空间中，这种表示能够体现实体和关系的语义信息，可以高效地计算实体、关系及其之间的复杂语义关联。 神经符号机：是一种将神经网络与符号推理相结合的技术，近年来开始被用于自然语言处理领域。神经符号机是利用神经网络对函数演算和图灵机等传统计算模型进行建模。根据抽象层次的不同，可以将其分为两类。一类为抽象层次较高，每个推理步骤都是从设计好的操作集合里选择，再选择合适的操作数，通过依次操作，得到最终答案。另一类的做法抽象层次较低，代表工作如神经图灵机、可微分神经计算机等，它们从模拟计算机底层操作方式的角度抽象模型，设计出内存、CPU控制器等结构，并借鉴传统计算机操作系统的思路，从随机访存、空闲内存分配、访存时序等不同侧面进行建模，完善模型的能力。 "},{"title":"LateXLearning","date":"2020-10-11T15:59:56.000Z","url":"/SmartBoyMB.github.io/2020/10/11/LateXLearning/","tags":[["工具","/SmartBoyMB.github.io/tags/%E5%B7%A5%E5%85%B7/"]],"categories":[["学习","/SmartBoyMB.github.io/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"LaTex Learning Life在这里我会记录一些在学习LaTeX工具过程中遇到的一些问题和坑。 编写伪代码编写伪代码需要导入包algorithm、algorithmic、algpseudocode，但在实践中发现导入包algorithm后不要再导入algorithmic，否则会因为冲突报错，报错形式为Missing \\endcsname inserted。"},{"title":"Hello my blog life","date":"2020-10-09T11:06:06.000Z","url":"/SmartBoyMB.github.io/2020/10/09/Hellpmyblog/","tags":[["生活","/SmartBoyMB.github.io/tags/%E7%94%9F%E6%B4%BB/"],["工具","/SmartBoyMB.github.io/tags/%E5%B7%A5%E5%85%B7/"]],"categories":[["学习","/SmartBoyMB.github.io/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"start my blog life从今天开始就开始编写自己blog来记录自己的学习经历啦！！！ 如何来搭建一个博客首先我是基于github平台，使用Hexo工具来搭建我的个人博客的。在这里不详细的说明整个搭建的过程，网络上有非常多且详细的教程来指导博客的搭建，这篇博客主要是说明我搭建时的部分内容和遇到的难题。 这是我搭建时参考的视频教程： GitHub仓库的设置在创建github仓库时，需要将仓库名命名为yourname.github.io，并且进入setting界面，下滑到GitHub Pages选项，设置source下的Branch为你博客部署的分支，并点击save保存。 GitHub测试访问博客时404问题在设置好后，如果按照视频教程中通过仓库名作为网址（README文件内网址）测试访问博客网址，会出现页面404的问题。这个问题难为了我很久，查询了资料才发现这个问题出现在我们创建github账号以后，创建的github的博客域名和自己的账号不一样导致的。如果直接通过仓库名作为网址访问的话，博客域名和账号名字要一样，不然会404。但是，如果名字不一样，就需要通过setting界面下GitHub Pages选项下的site网址访问。 Hexo工具部署博客到GitHub参数设置问题Hexo文档地址： 在部署时，_config.yml文件的一些参数设置 参数 描述 url setting界面下GitHub Pages选项下的site地址。 root /yourname.github.io/(两个斜杠不能去省略) deploy：type git（可以是其他方式) deploy：repo 仓库的git地址(也可以是其他方式的地址) deploy：branch 对应在setting界面，下滑到GitHub Pages选项，设置source下的Branch名称 主题的下载和设置主题下载地址： 首先在该地址浏览找到自己喜欢的主题，并通过提供的github链接下载文件放置在Hexo工具创建的博客文件的themes文件夹下。下一步在_config.yml文件内改变themes的参数为新主题名。其他的设置参照给的thems内的README文件内的说明进行设置。"}]